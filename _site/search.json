[
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "1 Challenge 1.1 Analyze of the sales by location\nThe following figure shows the bar plot for sales by each state. As can be seen from Fig. 1, the State of NRW has the highest revenue of 21.200.613 euro.\n\n\nFig. 1 Bar Plot of sales for each state in Germany\n\n\n\n2 Challenge 1.2 Analyze of the sales by location and year\nFigure 2 shows the bar plot for sales by each state and each year.\n\n\nFig. 1 Bar Plot of sales for each state in Germany\n\n\n\n3 Source Code\n\n# Data Science at TUHH ------------------------------------------------------\n# SALES ANALYSIS ----\n\n# 1.0 Load libraries ----\nlibrary(tidyverse)\n\n#> -- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\n#> v dplyr     1.1.2     v readr     2.1.4\n#> v forcats   1.0.0     v stringr   1.5.0\n#> v ggplot2   3.4.2     v tibble    3.2.1\n#> v lubridate 1.9.2     v tidyr     1.3.0\n#> v purrr     1.0.1     \n#> -- Conflicts ------------------------------------------ tidyverse_conflicts() --\n#> x dplyr::filter() masks stats::filter()\n#> x dplyr::lag()    masks stats::lag()\n#> i Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(readxl)\n\n# 2.0 Importing Files ----\nbikes_tbl      <- read_excel(path = \"../../00_data/01_bike_sales/01_raw_data/bikes.xlsx\")\norderlines_tbl <- read_excel(\"../../00_data/01_bike_sales/01_raw_data/orderlines.xlsx\")\n\n#> New names:\n#> * `` -> `...1`\n\n# Not necessary for this analysis, but for the sake of completeness\nbikeshops_tbl  <- read_excel(\"../../00_data/01_bike_sales/01_raw_data/bikeshops.xlsx\")\n\n# 3.0 Examining Data ----\n\n\n# 4.0 Joining Data ----\nbike_orderlines_joined_tbl <- orderlines_tbl %>%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %>%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\n# 5.0 Wrangling Data ----\n\n\nbike_orderlines_wrangled_tbl <- bike_orderlines_joined_tbl %>% \n  # 5.1 Separate location\n  separate(col    = location,\n           into   = c(\"city\", \"state\"),\n           sep    = \", \") %>%\n  # 5.2 Add the total price (price * quantity) \n  # Add a column to a tibble that uses a formula-style calculation of other columns\nmutate(total.price = price * quantity) \n\n\n\n# 5.3 Optional: Reorganize. Using select to grab or remove unnecessary columns\n# 5.3.1 by exact column name\nbike_orderlines_wrangled_tbl_reorg<- bike_orderlines_wrangled_tbl %>% select(-...1, -gender)%>% \n  \n  # 5.3.2 by a pattern\n  # You can use the select_helpers to define patterns. \n  # Type ?ends_with and click on Select helpers in the documentation\n  select(-ends_with(\".id\")) %>%\n  \n  # 5.3.3 Actually we need the column \"order.id\". Let's bind it back to the data\n  bind_cols(bike_orderlines_joined_tbl %>% select(order.id)) \n\n# 5.3.4 You can reorder the data by selecting the columns in your desired order.\n# You can use select_helpers like contains() or everything()\nbike_orderlines_wrangled_tbl_reorg_reorder <- bike_orderlines_wrangled_tbl_reorg %>% select(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n                                                                                            price, quantity, total.price,\n                                                                                            everything()) %>%\n  # 5.4 Rename columns because we actually wanted underscores instead of the dots\n  # (one at the time vs. multiple at once)\n  rename(bikeshop = name) %>%\n  set_names(names(.) %>% str_replace_all(\"\\\\.\", \"_\"))\n\n# 6.0 Business Insights ----\n\n# 6.1 Sales by State ----\n\n# Step 1 - Manipulate\n\nlibrary(lubridate)\n# Step 1 - Manipulate\nsales_by_state_tbl <- bike_orderlines_wrangled_tbl_reorg_reorder %>%\n  \n  # Select columns\n  select(state, total_price) %>%\n  \n  \n  # Grouping by year and summarizing sales\n  group_by(state) %>%\n  summarize(sales = sum(total_price))%>%\n  \n  # Optional: Add a column that turns the numbers into a currency format \n  # (makes it in the plot optically more appealing)\n  # mutate(sales_text = scales::dollar(sales)) <- Works for dollar values\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\nsales_by_state_tbl\n\n\n\n  \n\n\n# Step 2 - Visualize\nsales_by_state_tbl %>%\n  \n  # Setup canvas with the columns state (x-axis) and sales (y-axis)\n  ggplot(aes(x = state, y = sales)) +\n  \n  # Geometries\n  geom_col(fill = \"#FFC300\") + # Use geom_col for a bar plot\n  geom_label(aes(label = sales_text)) + # Adding labels to the bars\n  \n  \n  # Formatting\n  # scale_y_continuous(labels = scales::dollar) + # Change the y-axis. \n  # Again, we have to adjust it for euro values\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title    = \"Revenue by state\",\n    x = \"\", # Override defaults for x and y\n    y = \"Revenue\" \n  )+ theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n# 6.2 Sales by state and year  ----\n\n# Step 1 - Manipulate\nsales_by_state_year_tbl <- bike_orderlines_wrangled_tbl_reorg_reorder %>%\n  \n  # Select columns and add a year\n  select(order_date, total_price, state) %>%\n  mutate(year = year(order_date)) %>%\n  \n  # Group by and summarize state and year\n  group_by(state, year) %>%\n  summarise(sales = sum(total_price)) %>%\n  ungroup() %>%\n  \n  # Format $ Text\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#> `summarise()` has grouped output by 'state'. You can override using the\n#> `.groups` argument.\n\nsales_by_state_year_tbl\n\n\n\n  \n\n\n# Step 2 - Visualize\n\nsales_by_state_year_tbl %>%\n  \n  # Set up x, y, fill\n  ggplot(aes(x = year, y = sales, fill = state)) +\n  \n  # Geometries\n  geom_col() + # Run up to here to get a stacked bar plot\n# Facet\nfacet_wrap(~ state) +\n  \n  \n  \n  # Formatting\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by state and year\",\n    fill = \"year\" # Changes the legend name\n  )+ theme(axis.text.x = element_text(angle = 90, hjust = 1))"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "1 Question 1 Patent Dominance\nWhat US company / corporation has the most patents? List the 10 US companies with the most assigned/granted patents. Table 1 shows the top 10 Companies.\nTable 1: The Top 10 US Companies with the Most Assigned/Granted Patents | Rank | Organization | Number of Patents | |——|—————————————–|——————:| | 1 | International Business Machines Corporation | 7547 | | 2 | Samsung Electronics Co., Ltd. | 5835 | | 3 | Canon Kabushiki Kaisha | 4099 | | 4 | Sony Corporation | 3326 | | 5 | Microsoft Corporation | 3165 | | 6 | Google Inc. | 2668 | | 7 | Kabushiki Kaisha Toshiba | 2656 | | 8 | QUALCOMM Incorporated | 2597 | | 9 | LG Electronics Inc. | 2459 | | 10 | Panasonic Corporation | 2218 |\n#Source Code"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  }
]