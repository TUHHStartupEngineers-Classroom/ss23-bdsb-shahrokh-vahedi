---
title: "Data Visualization"
author: "Shahrokh Vahedi"
---

# Challenge 1 Mapping the time course of the cumulative Covid-19 cases!


The following figure shows the time series of total confirmed cases of Covid-19 for selected countries.

![Fig. 1 Total Confirmed Cases of Covid-19](../../assets/img/challenge1_data_visualization.png)


# Challenge 2 Visualize the distribution of the mortality rate

The following figure shows the world map of death rate of Covid-19.

![Fig. 1 Mortality Rate of Covid-19 (as of 25 May 2023)](../../assets/img/ch_2_data_visualization.png)


# Source Code

## Challenge 1

```{r}

# Data Visualization

# Challenge 1

# Load required libraries
library(tidyverse)   # For data manipulation and visualization
library(ggrepel)    # For label repulsion in plots
library(scales)      # For customizing scale labels
library(lubridate)   # For working with dates
Sys.setlocale("LC_TIME", "English")  # Set English locale for date formatting

# Read the COVID-19 data from the provided URL
world_cov_data <- read_csv("https://covid.ourworldindata.org/data/owid-covid-data.csv")

# Select only the relevant columns: date, continent, location, and total_cases
world_cov_data <- world_cov_data %>% 
  select(date, continent, location, total_cases) %>% 
  filter(!is.na(total_cases))

# Convert the date column to Date format
world_cov_data$date <- as.Date(world_cov_data$date)

# Select data for chosen countries
chosen_count <- c("Europe", "France", "Germany", "Spain", "United Kingdom", "United States")
chosen_data <- world_cov_data %>% filter(location %in% chosen_count)

# Create a vector of distinct colors
line_colors <- c("#FF0000", "#00FF00", "#0000FF", "#FF00FF", "#FFFF00", "#00FFFF")

# Create the plot
ggplot(chosen_data, aes(x = date, y = total_cases, color = location, group = location)) +
  geom_line(size = 1) +
  geom_label_repel(data = chosen_data %>% filter(date == max(date)), aes(label = location, x = date, y = total_cases),
                   size = 4, box.padding = unit(0.5, "lines"), point.padding = unit(0.4, "lines"), show.legend = FALSE) +
  labs(title = "Covid-19 Confirmed Cases Worldwide", subtitle = "Data as of 25/05/2023", y = "Cumulative Cases", x = "Continent/Country") +
  scale_y_continuous(labels = function(x) format(x/1e6, big.mark = " ", scientific = FALSE) %>% paste0(" ", "M")) +
  scale_x_date(date_breaks = "1 month", date_labels = "%B '%y") +
  scale_color_manual(values = line_colors) +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom",
        legend.title = element_text(size = 12),
        legend.text = element_text(size = 10),
        legend.margin = margin(t = 10),
        legend.box = "horizontal",
        legend.box.just = "center",
        legend.spacing.x = unit(0.1, "cm"))
```


## Chalenge 2

```{r}

# Data Visualization
## Challenge 2

# Load required libraries
library(tidyverse)   # For data manipulation and visualization
library(maps)       # For map data and plotting geographic maps
library(mapdata)    # Additional map datasets for use with maps package
library(ggplot2)    # For creating visually appealing and customizable graphics
library(scales)     # Customizing scale labels in plots

# Read the COVID-19 data from the provided URL
world_cov_data <- read_csv("https://covid.ourworldindata.org/data/owid-covid-data.csv")

# Select only the relevant columns: date, location, population, total_cases, total_deaths
world_cov_data <- world_cov_data %>% 
  select(date, location, population, total_cases, total_deaths) %>% 
  filter(!is.na(total_cases), !is.na(total_deaths))

# Calculate mortality rate by dividing the total deaths by the population
mort_rate <- world_cov_data$total_deaths / world_cov_data$population
world_cov_data <- world_cov_data %>% mutate(mortality_rate = mort_rate)

# Select the most recent data for each location
recent_data <- world_cov_data %>% 
  group_by(location) %>% 
  slice_tail(n = 1)

# Align country names to match the names used in the map data
recent_data <- recent_data %>% 
  mutate(location = case_when(
    location == "United Kingdom" ~ "UK",
    location == "United States" ~ "USA",
    location == "Democratic Republic of Congo" ~ "Democratic Republic of the Congo",
    TRUE ~ location
  )) %>% 
  distinct()

# Merge the data with map data
world_mp_data <- map_data("world")
world_map_data <- right_join(world_mp_data, recent_data, by = c("region" = "location"))

# Plotting the map
plot_data <- ggplot() +
  geom_map(data = world_map_data, map = world_map_data, aes(map_id = region, fill = mortality_rate),
           color = "white", size = 0.1) +
  expand_limits(x = world_mp_data$long, y = world_mp_data$lat) +
  scale_fill_gradient(low = "red", high = "black", name = "Mortality Rate",
                      labels = scales::percent_format()) +
  labs(title = "Confirmed COVID-19 deaths relative to the size of the population",
       subtitle = "Around 6.9 Million confirmed COVID-19 deaths worldwide (May 2023)") +
  theme_void() +
  theme(plot.title = element_text(hjust = 0.5, size = 11, face = "bold"),
        plot.subtitle = element_text(hjust = 0.5, size = 9),
        legend.position = "right",
        legend.title.align = 0.5,
        legend.text = element_text(size = 7),
        legend.title = element_text(size = 9),
        panel.background = element_rect(fill = "transparent", color = "white"))

print(plot_data)

```


